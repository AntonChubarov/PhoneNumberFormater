// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRawStorage is a mock of RawStorage interface.
type MockRawStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRawStorageMockRecorder
}

// MockRawStorageMockRecorder is the mock recorder for MockRawStorage.
type MockRawStorageMockRecorder struct {
	mock *MockRawStorage
}

// NewMockRawStorage creates a new mock instance.
func NewMockRawStorage(ctrl *gomock.Controller) *MockRawStorage {
	mock := &MockRawStorage{ctrl: ctrl}
	mock.recorder = &MockRawStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawStorage) EXPECT() *MockRawStorageMockRecorder {
	return m.recorder
}

// GetAllRawNumbers mocks base method.
func (m *MockRawStorage) GetAllRawNumbers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRawNumbers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllRawNumbers indicates an expected call of GetAllRawNumbers.
func (mr *MockRawStorageMockRecorder) GetAllRawNumbers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRawNumbers", reflect.TypeOf((*MockRawStorage)(nil).GetAllRawNumbers))
}

// MockValidStorage is a mock of ValidStorage interface.
type MockValidStorage struct {
	ctrl     *gomock.Controller
	recorder *MockValidStorageMockRecorder
}

// MockValidStorageMockRecorder is the mock recorder for MockValidStorage.
type MockValidStorageMockRecorder struct {
	mock *MockValidStorage
}

// NewMockValidStorage creates a new mock instance.
func NewMockValidStorage(ctrl *gomock.Controller) *MockValidStorage {
	mock := &MockValidStorage{ctrl: ctrl}
	mock.recorder = &MockValidStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidStorage) EXPECT() *MockValidStorageMockRecorder {
	return m.recorder
}

// AddValidNumber mocks base method.
func (m *MockValidStorage) AddValidNumber(validNumber ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range validNumber {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddValidNumber", varargs...)
}

// AddValidNumber indicates an expected call of AddValidNumber.
func (mr *MockValidStorageMockRecorder) AddValidNumber(validNumber ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValidNumber", reflect.TypeOf((*MockValidStorage)(nil).AddValidNumber), validNumber...)
}

// GetAllValidNumbers mocks base method.
func (m *MockValidStorage) GetAllValidNumbers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValidNumbers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllValidNumbers indicates an expected call of GetAllValidNumbers.
func (mr *MockValidStorageMockRecorder) GetAllValidNumbers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValidNumbers", reflect.TypeOf((*MockValidStorage)(nil).GetAllValidNumbers))
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidator) Validate(number string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", number)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), number)
}

// MockFormatter is a mock of Formatter interface.
type MockFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockFormatterMockRecorder
}

// MockFormatterMockRecorder is the mock recorder for MockFormatter.
type MockFormatterMockRecorder struct {
	mock *MockFormatter
}

// NewMockFormatter creates a new mock instance.
func NewMockFormatter(ctrl *gomock.Controller) *MockFormatter {
	mock := &MockFormatter{ctrl: ctrl}
	mock.recorder = &MockFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormatter) EXPECT() *MockFormatterMockRecorder {
	return m.recorder
}

// AddCountryCode mocks base method.
func (m *MockFormatter) AddCountryCode(validNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCountryCode", validNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCountryCode indicates an expected call of AddCountryCode.
func (mr *MockFormatterMockRecorder) AddCountryCode(validNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCountryCode", reflect.TypeOf((*MockFormatter)(nil).AddCountryCode), validNumber)
}

// TryToFix mocks base method.
func (m *MockFormatter) TryToFix(number string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToFix", number)
	ret0, _ := ret[0].(string)
	return ret0
}

// TryToFix indicates an expected call of TryToFix.
func (mr *MockFormatterMockRecorder) TryToFix(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToFix", reflect.TypeOf((*MockFormatter)(nil).TryToFix), number)
}

// MockVisualizer is a mock of Visualizer interface.
type MockVisualizer struct {
	ctrl     *gomock.Controller
	recorder *MockVisualizerMockRecorder
}

// MockVisualizerMockRecorder is the mock recorder for MockVisualizer.
type MockVisualizerMockRecorder struct {
	mock *MockVisualizer
}

// NewMockVisualizer creates a new mock instance.
func NewMockVisualizer(ctrl *gomock.Controller) *MockVisualizer {
	mock := &MockVisualizer{ctrl: ctrl}
	mock.recorder = &MockVisualizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVisualizer) EXPECT() *MockVisualizerMockRecorder {
	return m.recorder
}

// Visualize mocks base method.
func (m *MockVisualizer) Visualize(number []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Visualize", number)
}

// Visualize indicates an expected call of Visualize.
func (mr *MockVisualizerMockRecorder) Visualize(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visualize", reflect.TypeOf((*MockVisualizer)(nil).Visualize), number)
}
